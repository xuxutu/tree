
一、硬件知识

1.CPU在不能直接处理硬盘上的文件，得放到内存条处理。

2.


二、基础知识

1.定义声明的区别：

定义为创建了对象并分配了内存，而声明没有分配内存。

2.基本数据类型：数值类型：整型：短整型（short int）、整型（int）、长整型（long int）
                          浮点型：单精度型（float）、双精度型（double）
                字符类型（char）：
  构造类型：数组，结构体，共用体，枚举类型
  指针类型：
  空类型：

3.变量为什么初始化？

  1.内存条属于硬件设备，所分配空间当中的数据要么是0要么是1.计算机每次重启后都清零。（数电，模电）
  2.操作系统在释放内存时，并不会将内存区域清零，操作系统区分内存的占用状态并不是依据内存中数据的有无来判断。（操作系统）
  3.VC6.0在通过操作系统为变量分配内存时，会为变量分配很大的值，以便程序员辨认变量值是否有效。

4.常量如何存储的？

  正数是以补码的形式转化为二进制代码存储在计算机中的
  实数是以IEE754标准转化为二进制代码存储在计算机中的
  字符的本质实际也是与整数的存储方式相同 


5.什么是字节

  字节就是存储数据的单位，并且是硬件所能访问的最小单位。1字节=8位二进制。1k=1024字节。

6.不同类型数据间的相互转换

7.什么是ASCLL码？

  规定某个字符用哪个数字来表示。  

8.为什么使用输出控制符？

  01组成的代码可以表示数据也可以表示指令；

9.除法 取余  逻辑运算符

  16/5=3(两个数都是整数则结果取整数)

  16/5.0（只要有一个小数则结果带有小数）

  取余
 
  -13%3=-1 （结果与被除数符号相同）

  逻辑

  m=(2>1)&&(k=5) //m值为1，因为C语言中1真0假，k为非零也视为真

  &&左边值为假时，右边值不执行 

10.强制类型转换

   int(6.7)=6;
   float(1)=1.0;

   例子：求分数之和（1+1/2+1/3+......1/100）

(1)
#include<stdio.h>
#include<stdlib.h>
int main(void)
{
  float sum=0;

  int i;

  for(i=1;i<=100;++i)
  {
    sum=sum+1.0/i;// sum=sum+1/(float)(i) 强制转换或者变小数
  }
 printf("%f\n",sum);
 
 system("pause");

 return 0;

}
(2)
float avg;
int sum,int count;
avg=sum/count //平均值有小数，可写成sum*1.0/count 1.0默认值是double类型


11.浮点数存储

  float 和 double 不能保证可以精确存一个小数

12.自增自减

  前自增和后自增的区别：

  相同点：最终都是i+1；
   
  不同点：
      
         前自增整体表达式的值是i加1之后的值
         后自增整体表达式的值是i加1之前的值

  为什么会出现自增？

  1.代码精练

  2.自增速度快 i++寄存器处理


13.三目运算符

  A?B:C

  等价于

  if (A)
  B;
  else
  C;

14.逗号表达式
   
   （A,B,C,D）=D;

15.变量的作用域和存储方式

  全局变量的作用区域从定义的位置开始到整个程序结束。

   局部变量名字与全局变量一样时，局部变量会屏蔽掉全局变量。

16.什么是枚举

   把一个事物所有可能的取值一一列举出来

 #include<stdio.h>
#include<stdlib.h>
enum WeekDay
{
  Mon,Tue,Wed,Thu,Fri,Sat,Sun
} ;                           //只定义一个数据类型名字、

int main()
{
enum WeekDay day=Wed;

printf("%d\n",day);//输出值2；

system("pause");
return 0;
}

17.NULL

  NULL为编号为0的地址，不允许程序员访问，*p=NULL;防止这种操作：int *p；*p=5


18.sizeof（）并不会真的去做计算

19.全局变量未初始化，默认为0；函数内部定义与全局变量同名，会隐藏全局变量；静态变量是特殊的全局变量（测试得出两者地址相邻);
  