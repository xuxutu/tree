1.高级语言vs汇编语言
  用高级语言编写的程序可以在不同的机器上进行编译和执行，而汇编代码则是与特定机器密切相关的。

2.为什么要学机器代码
  2.1 可以最大化一段关键代码的性能
  2.2 有些时候，高级语言提供的抽象层会隐藏我们想要了解的程序的运行时行为。
  2.3 可以了解线程的底层实现

3.本章解决的问题
  3.1 c/汇编和机器代码之间的关系
  3.2 了解如何实现c语言中的控制结构，如if/while/switch
  3.3 程序如何维护一个运行栈来支持过程间数据和控制的传递，以及局部变量的存储
  3.4 在机器级如何实现像数组、结构、联合这样的数据结构
  3.5 内存访问越界问题
  3.6 系统容易遭受缓冲区溢出攻击的问题
  3.7 GDB调试器检查机器级程序运行时行为的技巧
  3.8 浮点数数据和操作的代码的机器程序表示

4.处理器的状态
  4.1 程序计数器（PC,%rip表示），给出将要执行的命令在内存中的地址
  4.2 整数寄存器文件包含16个命名的位置，分别存储64位的值。
      4.2.1 有些寄存器被用来记录某些重要的程序状态。
      4.2.2 其他的寄存器用来保存临时的数据，过程的参数，和局部变量，以及函数的返回值
  4.3 条件码寄存器保存着最近执行的算术或逻辑指令的状态信息。它们用来实现控制或数据流中的条件变化，比如说，if，while语句
  4.4 一组向量寄存器可以存放一个或多个整数或浮点数值
  
5.数据传送指令
  5.1 MOV类：
      5.1.1 movb 传送字节（8）
      5.1.2 movw 传送字（16）
      5.1.3 movl 传送双字（32）
      5.1.4 movq 传送四字（64）
      
      源操作数指定的值是一个立即数，存储在寄存器或内存中。
      目的操作数指定一个位置，要么是寄存器，要么是内存地址。
      x86-64添加了一条限制，不能用一条指令从内存的一个位置mov到内存的另一个位置。先将源加载到寄存器当中，再将寄存器值写入目的位置
      
  5.2 压入和弹出栈数据
     5.2.1 x86-64中，栈向低地址方向增长，所以压栈是减小栈指针
     5.2.2 栈和程序代码以及其它形式的程序数据都是放在统一内存中
  
  5.3 算术和逻辑操作
     5.3.1 加载有效地址
           leaq 将有效地址写入到目的操作数
            
  
    
